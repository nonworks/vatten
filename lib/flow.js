// Generated by CoffeeScript 1.10.0
(function() {
  var Comflux, Distributary, Event, Filter, Flow, Sorter,
    slice = [].slice;

  module.exports = Flow = function(name) {
    var component, eventOn;
    component = Event();
    component.name = name;
    eventOn = component.on;
    component.treat = function(func) {
      var newFlow;
      newFlow = Flow(name);
      component.on('drip', function(stuff) {
        func(stuff);
        return newFlow.trigger('drip', stuff);
      });
      newFlow.get = component.get;
      return newFlow;
    };
    component.distribute = function(rule) {
      var d;
      d = Distributary(rule);
      component.on('drip', function(stuff) {
        return d.drip(stuff);
      });
      return d;
    };
    component.comflux = function() {
      var c, firstOpts, i, len, opts, ref, spout, spouts;
      spouts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      firstOpts = {};
      if (spouts[0].pop == null) {
        firstOpts = spouts.shift();
      }
      c = Comflux();
      c.add(component, firstOpts);
      for (i = 0, len = spouts.length; i < len; i++) {
        ref = spouts[i], spout = ref[0], opts = ref[1];
        c.add(spout, opts);
      }
      return c;
    };
    component.createFilter = function() {
      var f;
      f = Filter();
      component.on('drip', f.drip);
      return f;
    };
    component.filter = component.createFilter;
    component.sort = function(func) {
      var s;
      s = Sorter();
      if (func) {
        s.setOrder(func);
      }
      component.on('drip', function(stuff) {
        return s.drip(stuff);
      });
      return s;
    };
    component.registerEvents('drip');
    return component;
  };

  Event = require('event');

  Flow.Distributary = Distributary = require('./distributary');

  Flow.Comflux = Comflux = require('./comflux');

  Flow.Filter = Filter = require('./filter');

  Flow.Sorter = Sorter = require('./sorter');

}).call(this);
